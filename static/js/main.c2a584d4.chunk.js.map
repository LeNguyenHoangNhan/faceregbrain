{"version":3,"sources":["components/Logo/brain.png","components/Navigation/Navigation.jsx","components/Logo/Logo.jsx","components/ImageLinkForm/ImageLinkForm.jsx","components/Rank/Rank.jsx","components/FaceRecognition/FaceRecognition.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","style","display","justifyContent","className","Logo","options","max","height","width","src","brain","paddingTop","alt","ImageLinkForm","onLinkInputChange","onSubmitButtonClick","type","onChange","onClick","Rank","FaceRecognition","imageUrl","box","id","map","boundingBox","key","uid","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","app","Clarifai","App","apiKey","particleParam","paticles","number","value","density","enable","value_area","displayFaceBox","setState","calculateFaceLocation","data","clarifaiFaceRegions","outputs","regions","image","document","getElementById","imageWidth","Number","imageHeight","region","faceBoundingBox","region_info","bounding_box","left_col","top_row","right_col","bottom_row","target","input","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","console","log","param","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c2a584d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.160724aa.png\";","import React from \"react\";\n\nconst Navigation = () => (\n    <nav style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n        <p className=\"f3 link dim black underline pa3 pointer\">Sign out</p>\n    </nav>\n);\nexport default Navigation;\n","import React from \"react\";\nimport Tilt from \"react-tilt\";\nimport \"./Logo.css\";\nimport brain from \"./brain.png\";\n\nconst Logo = () => (\n    <div className=\"ma4 mt0\">\n        <Tilt\n            className=\"Tilt br2 shadow-2\"\n            options={{ max: 35 }}\n            style={{ height: 150, width: 150 }}\n        >\n            <div className=\"Tilt-inner pa3\">\n                {\" \"}\n                <img\n                    src={brain}\n                    style={{ paddingTop: \"5px\" }}\n                    alt=\"Logo Brain\"\n                />{\" \"}\n            </div>\n        </Tilt>\n    </div>\n);\n\nexport default Logo;\n","import React from \"react\";\nimport \"./ImageLinkForm.css\";\nconst ImageLinkForm = ({ onLinkInputChange, onSubmitButtonClick }) => (\n    <div>\n        <p className=\"f3\">\n            {\n                \"This Magic Brain will detect faces in your pictures. Git it a try.\"\n            }\n        </p>\n        <div className=\"center \">\n            <div className=\"form center pa4 br3 shadow-5\">\n                <input\n                    className=\"f4 pa2 w-70 center\"\n                    type=\"text\"\n                    onChange={onLinkInputChange}\n                />\n                <button\n                    className=\"w-30 grow f4 link ph3 pv2 dib white bg-light-purple\"\n                    onClick={onSubmitButtonClick}\n                >\n                    Detect\n                </button>\n            </div>\n        </div>\n    </div>\n);\n\nexport default ImageLinkForm;\n","import React from \"react\";\n\nconst Rank = () => (\n    <div>\n        <div className=\"white f3\">{\"Nhan, your current rank is...\"}</div>\n        <div className=\"white f1\">{\"#5\"}</div>\n    </div>\n);\n\nexport default Rank;\n","import React from \"react\";\nimport \"./FaceRecognition.css\";\nimport { uid } from \"react-uid\";\nconst FaceRecognition = ({ imageUrl, box }) => (\n    <div className=\"center\">\n        <div className=\"absolute mt2\">\n            {imageUrl !== \"\" ? (\n                <img\n                    src={imageUrl}\n                    alt=\"\"\n                    width=\"500px\"\n                    height=\"auto\"\n                    id=\"input_img\"\n                />\n            ) : (\n                <></>\n            )}\n            {box.map(boundingBox => (\n                <div\n                    className=\"bounding-box\"\n                    key={uid(boundingBox)}\n                    style={{\n                        top: boundingBox.topRow,\n                        right: boundingBox.rightCol,\n                        bottom: boundingBox.bottomRow,\n                        left: boundingBox.leftCol\n                    }}\n                />\n            ))}\n        </div>\n    </div>\n);\n\nexport default FaceRecognition;\n","import React from \"react\";\nimport \"./App.css\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport Particles from \"react-particles-js\";\nimport \"tachyons\";\nimport Clarifai from \"clarifai\";\n\nconst app = new Clarifai.App({ apiKey: \"0e597aad212e438b8c5c1b5837747b94\" });\n\nconst particleParam = {\n    paticles: {\n        number: {\n            value: 80,\n            density: {\n                enable: true,\n                value_area: 800\n            }\n        }\n    }\n};\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            input: \"\",\n            imageUrl: \"\",\n            box: []\n        };\n    }\n\n    displayFaceBox = box => {\n        this.setState({ box });\n    };\n    calculateFaceLocation = data => {\n        const clarifaiFaceRegions = data.outputs[0].data.regions;\n        const image = document.getElementById(\"input_img\");\n        const imageWidth = Number(image.width);\n        const imageHeight = Number(image.height);\n        const box = clarifaiFaceRegions.map(region => {\n            let faceBoundingBox = region.region_info.bounding_box;\n            return {\n                leftCol: faceBoundingBox.left_col * imageWidth,\n                topRow: faceBoundingBox.top_row * imageHeight,\n                rightCol: imageWidth - faceBoundingBox.right_col * imageWidth,\n                bottomRow:\n                    imageHeight - faceBoundingBox.bottom_row * imageHeight\n            };\n        });\n        return box;\n    };\n\n    onLinkInputChange = ({ target }) => {\n        this.setState({ input: target.value });\n    };\n    onSubmitButtonClick = () => {\n        this.setState({ imageUrl: this.state.input, box: [] });\n        app.models\n            .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n            .then(response => {\n                if (response.outputs[0].data.regions) {\n                    this.displayFaceBox(this.calculateFaceLocation(response));\n                }\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    };\n    render() {\n        return (\n            <div className=\"App\">\n                <Particles param={particleParam} className=\"particles\" />\n                <Navigation />\n                <Logo />\n                <Rank />\n                <ImageLinkForm\n                    onLinkInputChange={this.onLinkInputChange}\n                    onSubmitButtonClick={this.onSubmitButtonClick}\n                />\n                <FaceRecognition\n                    imageUrl={this.state.imageUrl}\n                    box={this.state.box}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}